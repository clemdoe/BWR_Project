/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


convertToMeters 1;


//- La mitad del angulo que se va a simular
halfAngle 0.5;

//- Radio del tubo [m]
radius 0.0077; //Diametro: 0.0154 m = 15.4 mm

//- Altura del tubo [m]
l 2;

radHalfAngle    #calc "degToRad($halfAngle)";
y               #calc "$radius*sin($radHalfAngle)";
minY            #calc "-1.0*$y";
x               #calc "$radius*cos($radHalfAngle)";
//minX            #calc "-1.0*$x";


// - La mitad de la mitad
//halfAngle2 #calc "$halfAngle*0.5";
//radHalfAngle2 		#calc "degToRad($halfAngle2)";
//yarc               #calc "$radius*sin($radHalfAngle2)";

// Cantidad de celdas
// Celdas en la vertical
cellV 150;
// Celdas en profundidad (si es 2D se pone 1)
cellP 1;
// Celdas radiales
cellR 20;


vertices
(
    (0       0          0)
    ($x      $minY	0)
    ($x      $y		0)
    (0       0          $l)
    ($x      $minY 	$l)
    ($x      $y 	$l)
);

/*
vertices
(
    (0          0           0)
    (0.0154      -0.00108894 0)
    (0.0154      0.00108894 0)
    (0          0           2)
    (0.0154      -0.00108894 2)
    (0.0154      0.00108894 2)
);*/

blocks
(
    hex (0 1 2 0 3 4 5 3) ($cellR $cellP $cellV) simpleGrading (1 1 1)
);

edges
(
    arc 1 2 (0 $radius 0)
    arc 4 5 (0 $radius $l)
);


boundary
(
    front
    {
        type wedge;
        faces
        (
            (0 1 4 3)
        );
    }
    back
    {
        type wedge;
        faces
        (
            (0 3 5 2)
        );
    }
    inlet
    {
        type patch;
        faces
        (
            (0 2 1 0)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (3 4 5 3)
        );
    }
    axis
    {
        type empty;
        faces
        (
            (0 3 3 0)
        );
    }
    pared
    {
        type wall;
        faces
        (
            (1 2 5 4)
        );
    }
);


// ************************************************************************* //
